package fr.utbm.ia54.simulationorca.sarlskill

import java.util.List
import fr.utbm.ia54.simulationorca.environmentmodel.Obstacle
import java.util.ArrayList

import fr.utbm.ia54.simulationorca.framework.Constants
import fr.utbm.ia54.simulationorca.framework.Line
import fr.utbm.ia54.simulationorca.sarlcapacity.ComputeNextMoveCapacity
import fr.utbm.ia54.simulationorca.framework.Vector
import fr.utbm.ia54.simulationorca.environmentmodel.AgentBody

skill ComputeORCASkill implements ComputeNextMoveCapacity {
	
	var bodyPos : Vector
	var bodyVelocity : Vector
	var finalPos : Vector
	var newVelocity : Vector
	
	new (position : Vector, finalPosition : Vector) {
	    super()
	    finalPos = finalPosition
	}
	
	def nextMove (perceptions : List<Object>, body : AgentBody): Vector {

//		bodyPos = new Vector( (Math.random()*500 +1) as int,(Math.random()*500 +1) as int)
		var obstacles = new ArrayList<Obstacle>
		var neighbours = new ArrayList<AgentBody>
	
		for (elt : perceptions){
			switch (elt.class) {
					case typeof(Obstacle) : { 
						obstacles.add(elt as Obstacle);
					} 
					case typeof(AgentBody) : {
						neighbours.add(elt as AgentBody);
					}
					default : {
						println("ComputeORCASkill - Unknown type in the perception list : " + elt.class)
					}
			}
		}
		
				
		bodyPos = body.position
		bodyVelocity = body.velocity
		newVelocity = new Vector(0,0)
		
		var orcaLines = <Line>newArrayList
		
		if(!obstacles.isEmpty){		
			orcaLines = orcaLinesForObstacles2(obstacles)
		}
		var numObstLines = orcaLines.size
		if(!neighbours.isEmpty){
			orcaLines += orcaLinesForNeighbours(orcaLines, neighbours)			
		}
		
		var maxSpeed = Constants.MAX_SPEED //XXX what is this thing ...
		
		/*
		 *  XXX finalPos = prefVelocity ?  
		 *  non j'avais lu trop vite: voir dans exampleBlock.cpp setPreferredVelocities() ligne 161
		 *  prefVelocity = finalPos-BodyPos (a normaliser au besoin)
		 */
		var prefVelocity=finalPos.minus(bodyPos)
		if (prefVelocity.absSq > 1.0f) {
			prefVelocity = prefVelocity.normalize;
		}
		
		var lineFail = linearProgram2(orcaLines, maxSpeed,prefVelocity , false); 

		if (lineFail < orcaLines.size) {
			linearProgram3(orcaLines, numObstLines, lineFail, maxSpeed);
		}

		return newVelocity
	}
	
	
	def isAlreadyCovered(orcaLines:List<Line>,relativePosition1:Vector,relativePosition2:Vector,invTimeHorizonObst:float,radius:float):boolean{
		for(line : orcaLines){
			var temp1 = ((relativePosition1.prod(invTimeHorizonObst)).minus(line.point)).det(line.direction)
			var temp2 = ((relativePosition2.prod(invTimeHorizonObst)).minus(line.point)).det(line.direction)
			
			if(temp1 - invTimeHorizonObst * radius < -Constants.EPSILON || temp2 - invTimeHorizonObst * radius < -Constants.EPSILON){
			 			return true
			}
			
		}
		return false;
	}
	
	
	def orcaLinesForObstacles2(obstacles : List<Obstacle>) : ArrayList<Line>{
		var orcaLines = new ArrayList<Line>
		var invTimeHorizonObst = 1/Constants.TIME_HORIZON_OBST // XXX check what that variable stands for ! seems like a key point
		var radius = Constants.COMBINED_RADIUS/2
		
		for (obstacle : obstacles){
			for (segment : obstacle.getSegments){
				var segment2 = obstacle.next(segment)
				var relativePosition1 = segment.point.minus(bodyPos)
				var relativePosition2 = segment2.point.minus(bodyPos)
				
				if (!isAlreadyCovered(orcaLines,relativePosition1,relativePosition2,invTimeHorizonObst,radius)){
					// Not yet covered
					var distSq1 = relativePosition1.absSq
		 			var distSq2 = relativePosition2.absSq
		 			var radiusSq = Math.sqrt(radius)			 			
		 			var obstacleVector = segment2.point.minus(segment.point)
		 			var s = (relativePosition1.prod(-1)).prod(obstacleVector) / obstacleVector.absSq
		 			var distSqLine = ((relativePosition1.prod(-1)).minus(s)).prod(obstacleVector)
			 		
			 		var line = new Line
			 		
			 		if(s < 0 && distSq1 <= radiusSq){
			 			if(segment.isConvex){
				 			line.point = new Vector(0,0)
				 			line.direction = new Vector(-relativePosition1.getY(), relativePosition1.getX())
				 			orcaLines.add(line)
			 			}
			 		}
		 			else if (s > 1 && distSq2 <= radiusSq) {
			 			// Collision with right vertex
			 			// Ignore if non-convex or if it will be taken care of by neighboring obstacle
			 			
			 			// XXX initialiser correctement unitDir dans Segment
			 			if(segment2.isConvex && relativePosition2.det(segment2.unitDir) >= 0){
			 				line.point = new Vector(0,0)
				 			line.direction = new Vector(-relativePosition2.getY(), relativePosition2.getX())
				 			orcaLines.add(line)
				 		}
		 			} 
		 			else if(s >= 0 && s < 1 && distSqLine <= radiusSq){
			 			// Collision with obstacle segment 
			 			line.point = new Vector(0,0)
			 			line.direction = segment.unitDir.prod(-1)
			 			orcaLines.add(line)
		 			}
		 			else{
		 				// No collision, compute legs
				 		// When obliquely viewed, both legs can come from a single vertex 
				 		// Legs extend cutoff line when non convex vertex
				 		var leftLegDirection : Vector
				 		var rightLegDirection : Vector
				 		
				 		//rajout julian -- bool pour les continue lignes 168 et 184 
						var ignore=false;
				 		
				 		if(s < 0 && distSqLine <= radiusSq){
				 			// Obstacle viewed obliquely so that left vertex defines velocity obstacle
				 			if(!segment.isConvex){
				 				ignore=true
				 			}
				 			else{
				 				segment2 = segment
					 			var leg1 = Math.sqrt(distSq1 - radiusSq) as float
					 			rightLegDirection = new Vector(relativePosition1.x * leg1 - relativePosition1.y * radius, relativePosition1.x * radius + relativePosition1.y * leg1)
					 			rightLegDirection = rightLegDirection.divide(distSq1)
					 			leftLegDirection = new Vector(relativePosition1.x * leg1 + relativePosition1.y * radius, -relativePosition1.x * radius + relativePosition1.y * leg1)
					 			leftLegDirection = leftLegDirection.divide(distSq1)	
					 		}
				 		}
				 		else if (s > 1 && distSqLine <= radiusSq){
				 			// Obstacle viewed obliquely so that right vertex defines velocity obstacle
				 			if(!segment.isConvex){
				 				ignore=true
				 			}
				 			else{
				 				var leg2 = Math.sqrt(distSq2 - radiusSq) as float
				 				rightLegDirection = new Vector(relativePosition2.x * leg2 - relativePosition2.y * radius, relativePosition2.x * radius + relativePosition2.y * leg2)
					 			rightLegDirection = rightLegDirection.divide(distSq2)
					 			leftLegDirection = new Vector(relativePosition2.x * leg2 + relativePosition2.y * radius, -relativePosition2.x * radius + relativePosition2.y * leg2)
					 			leftLegDirection = leftLegDirection.divide(distSq2)
				 			}
				 		}
				 		else{
				 			//Usual situation
				 			if(segment.isConvex){
				 				var leg1 = Math.sqrt(distSq1 - radiusSq) as float
				 				leftLegDirection =  new Vector(relativePosition1.x * leg1 - relativePosition1.y * radius, relativePosition1.x* radius + relativePosition1.y * leg1) 
				 				leftLegDirection = leftLegDirection.divide(distSq1)
				 			} else {
				 				// left vertex non convex left leg extends cutoff line
				 				leftLegDirection = segment.unitDir.prod(-1)
				 			}
				 			if(segment2.isConvex){
				 				var leg2 = Math.sqrt(distSq2 - radiusSq) as float
				 				rightLegDirection =  new Vector(relativePosition2.x * leg2 - relativePosition2.y * radius, relativePosition2.x* radius + relativePosition2.y * leg2) 
				 				rightLegDirection = rightLegDirection.divide(distSq2)
				 			} else {
				 				// left vertex non convex left leg extends cutoff line
				 				rightLegDirection = segment.unitDir
				 			}
			 			}
			 			
			 			/*
						 * Legs can never point into neighboring edge when convex vertex,
						 * take cutoff-line of neighboring edge instead. If velocity projected on
						 * "foreign" leg, no constraint is added.
						 */
	
						if(!ignore){
							var leftNeighbor = obstacle.previous(segment)
					 		var isLeftLegForeign = false
					 		var isRightLegForeign = false
					 		
					 		if(segment.isConvex && leftLegDirection.det(leftNeighbor.unitDir.prod(-1)) >= 0){
					 			// Left leg points into obstacle
					 			leftLegDirection = leftNeighbor.unitDir.prod(-1)
					 			isLeftLegForeign = true	
					 		}
					 		
					 		if(segment2.isConvex && rightLegDirection.det(segment2.unitDir) <= 0){
					 			// Left leg points into obstacle
					 			rightLegDirection = segment2.unitDir
					 			isRightLegForeign = true			 			
					 		}
					 		
					 		// Compute cut off center
					 		var leftCutoff = (segment.point.minus(bodyPos)).prod(invTimeHorizonObst) 
					 		var rightCutoff = (segment2.point.minus(bodyPos)).prod(invTimeHorizonObst) 
					 		var cutoffVec = rightCutoff.minus(leftCutoff)
					 		
					 		//Project current velocity on velocity obstacle
					 		
					 		//Check if current velocity is projected on cutoff circles
					 		var t : float
							if(segment == segment2){
					 			t = 0.5 as float
					 		} 
					 		else {
					 			t = ((bodyVelocity.minus(leftCutoff)).prod(cutoffVec) / cutoffVec.absSq)
					 		}
					 		
					 		var tLeft = (bodyVelocity.minus(leftCutoff)).prod(leftLegDirection)
					 		var tRight = (bodyVelocity.minus(rightCutoff)).prod(rightLegDirection)	
					 		
					 		if((t < 0 && tLeft < 0) || (segment == segment2 && tLeft < 0 && tRight < 0)){
					 			// Project on left cutoff circle
					 			var unitW = (bodyVelocity.minus(leftCutoff)).normalize
					 			
					 			line.direction = new Vector(unitW.y, -unitW.x)
					 			line.point = leftCutoff.plus((unitW).prod(radius * invTimeHorizonObst))
					 			// XXX pas sÃ»r : cpp line.point = leftCutoff + radius_ * invTimeHorizonObst * unitW;
					 			orcaLines.add(line)
					 		}
					 		else if (t > 1 && tRight < 0){
					 			// Project on right cutoff circle
					 			var unitW = (bodyVelocity.minus(rightCutoff)).normalize
					 			
					 			line.direction = new Vector(unitW.y, -unitW.x)
					 			line.point = rightCutoff.plus((unitW).prod(radius * invTimeHorizonObst))
					 			// XXX pas sÃ»r : cpp line.point = rightCutoff + radius_ * invTimeHorizonObst * unitW;
					 			orcaLines.add(line)
			 			
			 				}
			 				else{
			 					var distSqCutoff : float
						 		var distSqLeft : float
						 		var distSqRight : float
			 					
			 					//Project on left leg, right leg or cut off line, whichever is closest to velocity
						 		if(t < 0 || t > 1 || segment == segment2){
						 			// XXX cpp distSqCutoff = std::numeric_limits<float>::infinity()
						 		}
						 		else {
						 			distSqCutoff = (bodyVelocity.minus((leftCutoff.plus(t)).prod(cutoffVec))).absSq
						 		}
			 		
						 		if(tLeft < 0){
						 			// XXX cpp distSqLeft = std::numeric_limits<float>::infinity()
						 		} else {
						 			distSqLeft = (bodyVelocity.minus((leftCutoff.plus(tLeft)).prod(leftLegDirection))).absSq
						 		}
						 		if(tRight < 0){
						 			// XXX cpp distSqRight = std::numeric_limits<float>::infinity()
						 		} else {
						 			distSqRight = (bodyVelocity.minus((leftCutoff.plus(tRight)).prod(rightLegDirection))).absSq
						 		}
			 					
			 					if(distSqCutoff <= distSqLeft && distSqCutoff <= distSqRight){
						 			//Project on cutoff line
						 			line.direction = segment.unitDir.prod(-1)
						 			line.point = leftCutoff.plus(new Vector(-line.direction.y, line.direction.x).prod(radius*invTimeHorizonObst))
						 			orcaLines.add(line)
						 	
						 		} else if(distSqLeft <= distSqRight){
						 			//Project on left leg
						 			if(!isLeftLegForeign){
						 				line.direction = leftLegDirection
							 			line.point = leftCutoff.plus(new Vector(-line.direction.y, line.direction.x).prod(radius * invTimeHorizonObst))
							 			orcaLines.add(line)
						 			}
	
						 		} else {
						 			//Project on right leg
						 			if(!isRightLegForeign){
						 				line.direction = rightLegDirection.prod(-1)
							 			line.point = rightCutoff.plus(new Vector(-line.direction.y, line.direction.x).prod(radius * invTimeHorizonObst))
							 			orcaLines.add(line)
						 			}
						 		}
			 				
			 				}
			 					
						}
				 		
			 		}
		 		
			 	//end if isAlreadyCovered	
				}
			//end for getSegments
			}
		 //end for
		}
		
		
		return orcaLines
	}
	
	//TODO traduire selon fichier OrcaObstacleSimplified
	def orcaLinesForObstacles(obstacles : List<Obstacle>) : ArrayList<Line>{
		var orcaLines = new ArrayList<Line>
		var invTimeHorizonObst = 1/Constants.TIME_HORIZON_OBST // XXX check what that variable stands for ! seems like a key point
		var radius = Constants.COMBINED_RADIUS/2
		
		for (obstacle : obstacles){
			for (segment : obstacle.getSegments){
				var segment2 = obstacle.next(segment)
				var relativePosition1 = segment.point.minus(bodyPos)
				var relativePosition2 = segment2.point.minus(bodyPos)
				// double check avec des bon vieux indices
				
				var alreadyCovered = false
				// Check if velocity obstacle of obstacle is already taken care of by
			 	// previously constructed obstacle ORCA lines 	
			 	for(line : orcaLines){
			 		var temp1 = ((relativePosition1.prod(invTimeHorizonObst)).minus(line.point)).det(line.direction)
			 		var temp2 = ((relativePosition2.prod(invTimeHorizonObst)).minus(line.point)).det(line.direction)
			 		if(temp1 - invTimeHorizonObst * radius < -Constants.EPSILON || temp2 - invTimeHorizonObst * radius < -Constants.EPSILON){
			 			alreadyCovered = true
			 			// XXX continue
					}
			 	}
			 	if(!alreadyCovered){
		 			// Not yet covered
		 			// Check for collisions
		 			
		 			var distSq1 = relativePosition1.absSq
		 			var distSq2 = relativePosition2.absSq
		 			var radiusSq = Math.sqrt(radius)			 			
		 			var obstacleVector = segment2.point.minus(segment.point)
		 			var s = (relativePosition1.prod(-1)).prod(obstacleVector) / obstacleVector.absSq
		 			var distSqLine = ((relativePosition1.prod(-1)).minus(s)).prod(obstacleVector)
			 		
			 		var line = new Line
			 		
			 		if(s < 0 && distSq1 <= radiusSq){
			 			// Collision with left vertex
			 			// Ignore if non vertex
			 			if(segment.isConvex){
				 			line.point = new Vector(0,0)
				 			line.direction = new Vector(-relativePosition1.getY(), relativePosition1.getX())
				 			orcaLines.add(line)
			 			}
			 			// XXX cpp continue
			 		} else if (s > 1 && distSq2 <= radiusSq) {
			 			// Collision with right vertex
			 			// Ignore if non-convex or if it will be taken care of by neighboring obstacle
			 			// XXX initialiser correctement unitDir dans Segment
			 			if(segment2.isConvex && relativePosition2.det(segment2.unitDir) >= 0){
			 				line.point = new Vector(0,0)
				 			line.direction = new Vector(-relativePosition2.getY(), relativePosition2.getX())
				 			orcaLines.add(line)
				 		}
				 		// XXX cpp continue
			 		} else if(s >= 0 && s < 1 && distSqLine <= radiusSq){
			 			// Collision with obstacle segment 
			 			line.point = new Vector(0,0)
			 			line.direction = segment.unitDir.prod(-1)
			 			orcaLines.add(line)
			 			// XXX cpp continue
			 		}
			 		
			 		// No collision, compute legs
			 		// When obliquely viewed, both legs can come from a single vertex 
			 		// Legs extend cutoff line when non convex vertex
			 		var leftLegDirection : Vector
			 		var rightLegDirection : Vector
			 		
			 		if(s < 0 && distSqLine <= radiusSq){
			 			// Obstacle viewed obliquely so that left vertex defines velocity obstacle
			 			if(!segment.isConvex){
			 				// XXX cpp continue
			 			}
			 			segment2 = segment
			 			var leg1 = Math.sqrt(distSq1 - radiusSq) as float
			 			rightLegDirection = new Vector(relativePosition1.x * leg1 - relativePosition1.y * radius, relativePosition1.x * radius + relativePosition1.y * leg1)
			 			rightLegDirection = rightLegDirection.divide(distSq1)
			 			leftLegDirection = new Vector(relativePosition1.x * leg1 + relativePosition1.y * radius, -relativePosition1.x * radius + relativePosition1.y * leg1)
			 			leftLegDirection = leftLegDirection.divide(distSq1)
			 		} else if (s > 1 && distSqLine <= radiusSq){
			 			// Obstacle viewed obliquely so that right vertex defines velocity obstacle
			 			if(!segment.isConvex){
			 				var leg2 = Math.sqrt(distSq2 - radiusSq) as float
			 				rightLegDirection = new Vector(relativePosition2.x * leg2 - relativePosition2.y * radius, relativePosition2.x * radius + relativePosition2.y * leg2)
				 			rightLegDirection = rightLegDirection.divide(distSq2)
				 			leftLegDirection = new Vector(relativePosition2.x * leg2 + relativePosition2.y * radius, -relativePosition2.x * radius + relativePosition2.y * leg2)
				 			leftLegDirection = leftLegDirection.divide(distSq2)
			 			}
			 		} else {
			 			//Usual situation
			 			if(segment.isConvex){
			 				var leg1 = Math.sqrt(distSq1 - radiusSq) as float
			 				leftLegDirection =  new Vector(relativePosition1.x * leg1 - relativePosition1.y * radius, relativePosition1.x* radius + relativePosition1.y * leg1) 
			 				leftLegDirection = leftLegDirection.divide(distSq1)
			 			} else {
			 				// left vertex non convex left leg extends cutoff line
			 				leftLegDirection = segment.unitDir.prod(-1)
			 			}
			 			if(segment2.isConvex){
			 				var leg2 = Math.sqrt(distSq2 - radiusSq) as float
			 				rightLegDirection =  new Vector(relativePosition2.x * leg2 - relativePosition2.y * radius, relativePosition2.x* radius + relativePosition2.y * leg2) 
			 				rightLegDirection = rightLegDirection.divide(distSq2)
			 			} else {
			 				// left vertex non convex left leg extends cutoff line
			 				rightLegDirection = segment.unitDir
			 			}
			 		}
			 		
			 		// Legs can never point into neighboring edge when convex vertex,
			 		// take cutoff-line of neighboring edge instead. If velocity projected on
			 		// "foreign" leg, no constraint is added.
			 		
			 		var leftNeighbor = obstacle.previous(segment)
			 		var isLeftLegForeign = false
			 		var isRightLegForeign = false
			 		
			 		if(segment.isConvex && leftLegDirection.det(leftNeighbor.unitDir.prod(-1)) >= 0){
			 			// Left leg points into obstacle
			 			leftLegDirection = leftNeighbor.unitDir.prod(-1)
			 			isLeftLegForeign = true			 			
			 		}
			 		
			 		if(segment2.isConvex && rightLegDirection.det(segment2.unitDir) <= 0){
			 			// Left leg points into obstacle
			 			rightLegDirection = segment2.unitDir
			 			isRightLegForeign = true			 			
			 		}
			 		
			 		// Compute cut off center
			 		var leftCutoff = (segment.point.minus(bodyPos)).prod(invTimeHorizonObst) 
			 		var rightCutoff = (segment2.point.minus(bodyPos)).prod(invTimeHorizonObst) 
			 		var cutoffVec = rightCutoff.minus(leftCutoff)
			 		
			 		//Project current velocity on velocity obstacle
			 		
			 		//Check if current velocity is projected on cutoff circles
			 		var t : float
			 		if(segment == segment2){
			 			t = 0.5 as float
			 		} else {
			 			t = ((bodyVelocity.minus(leftCutoff)).prod(cutoffVec) / cutoffVec.absSq)
			 		} 
			 		var tLeft = (bodyVelocity.minus(leftCutoff)).prod(leftLegDirection)
			 		var tRight = (bodyVelocity.minus(rightCutoff)).prod(rightLegDirection)	
			 		
			 		if((t < 0 && tLeft < 0) || (segment == segment2 && tLeft < 0 && tRight < 0)){
			 			// Project on left cutoff circle
			 			var unitW = (bodyVelocity.minus(leftCutoff)).normalize
			 			
			 			line.direction = new Vector(unitW.y, -unitW.x)
			 			line.point = leftCutoff.plus((unitW).prod(radius * invTimeHorizonObst))
			 			// XXX pas sÃ»r : cpp line.point = leftCutoff + radius_ * invTimeHorizonObst * unitW;
			 			orcaLines.add(line)
			 			// XXX cpp continue
			 		} else if (t > 1 && tRight < 0){
			 			// Project on right cutoff circle
			 			var unitW = (bodyVelocity.minus(rightCutoff)).normalize
			 			
			 			line.direction = new Vector(unitW.y, -unitW.x)
			 			line.point = rightCutoff.plus((unitW).prod(radius * invTimeHorizonObst))
			 			// XXX pas sÃ»r : cpp line.point = rightCutoff + radius_ * invTimeHorizonObst * unitW;
			 			orcaLines.add(line)
			 			// XXX cpp continue
			 		}
			 		
			 		var distSqCutoff : float
			 		var distSqLeft : float
			 		var distSqRight : float
			 		
			 		//Project on left leg, right leg or cut off line, whichever is closest to velocity
			 		if(t < 0 || t > 1 || segment == segment2){
			 			// XXX cpp distSqCutoff = std::numeric_limits<float>::infinity()
			 		} else {
			 			distSqCutoff = (bodyVelocity.minus((leftCutoff.plus(t)).prod(cutoffVec))).absSq
			 		}
			 		if(tLeft < 0){
			 			// XXX cpp distSqLeft = std::numeric_limits<float>::infinity()
			 		} else {
			 			distSqLeft = (bodyVelocity.minus((leftCutoff.plus(tLeft)).prod(leftLegDirection))).absSq
			 		}
			 		if(tRight < 0){
			 			// XXX cpp distSqRight = std::numeric_limits<float>::infinity()
			 		} else {
			 			distSqRight = (bodyVelocity.minus((leftCutoff.plus(tRight)).prod(rightLegDirection))).absSq
			 		}
			 		
			 		if(distSqCutoff <= distSqLeft && distSqCutoff <= distSqRight){
			 			//Project on cutoff line
			 			line.direction = segment.unitDir.prod(-1)
			 			line.point = leftCutoff.plus(new Vector(-line.direction.y, line.direction.x).prod(radius*invTimeHorizonObst))
			 			orcaLines.add(line)
			 			// XXX cpp continue
			 		} else if(distSqLeft <= distSqRight){
			 			//Project on left leg
			 			if(isLeftLegForeign){
			 				// XXX cpp continue
			 			}
			 			
			 			line.direction = leftLegDirection
			 			line.point = leftCutoff.plus(new Vector(-line.direction.y, line.direction.x).prod(radius * invTimeHorizonObst))
			 			orcaLines.add(line)
			 			// XXX cpp continue
			 		} else {
			 			//Project on right leg
			 			if(isRightLegForeign){
			 				// XXX cpp continue
			 			}
			 			
			 			line.direction = rightLegDirection.prod(-1)
			 			line.point = rightCutoff.plus(new Vector(-line.direction.y, line.direction.x).prod(radius * invTimeHorizonObst))
			 			orcaLines.add(line)
			 			// XXX cpp continue
			 		}
			 		
			 		return orcaLines
			 	
			 	} else {
			 		// Already covered do nothing
			 	}
			 			
			
			}
		}
		
		return orcaLines;
	}
	
	def orcaLinesForNeighbours(orcaLines : List<Line>, neighbours : List<AgentBody>) : List<Line> {
		
		var invTimeHorizon = 1/Constants.TIME_HORIZON // XXX check what that variable stands for ! seems like a key point
		var timeStep = Constants.TIME_STEP
		
		for (neighbour : neighbours){
			
			var relativePosition = neighbour.position.minus(bodyPos)
			var relativeVelocity = neighbour.velocity.minus(bodyVelocity)
			var distSq = relativePosition.absSq()
			var combinedRadius = Constants.COMBINED_RADIUS //"the radius of the circular constraint" XXX check if correct
			var combinedRadiusSq = Math.pow(combinedRadius, 2)
			
			var line = new Line
			var u : Vector
			
			if(distSq > combinedRadiusSq){
				
				// No collision
				var w = relativeVelocity.minus(relativePosition.prod(-invTimeHorizon))
				// Vector from cutoff center to relative velocity
				var wLengthSq = w.absSq()
				
				var dotProduct1 : float = w.prod(relativePosition)
				
				if(dotProduct1 < 0 && Math.pow(dotProduct1, 2) > combinedRadiusSq * wLengthSq){
					// Project on cutoff circle
					var wLength = Math.sqrt(wLengthSq) as float
					var unitW = w.divide(wLength)
					
					line.direction = new Vector(unitW.y, -unitW.x)
					u = unitW.prod(combinedRadius * invTimeHorizon - wLength)
				} else {
					// Project on legs
					var leg = Math.sqrt(distSq - combinedRadiusSq) as float

					if(relativePosition.det(w) > 0){
						var temp = new Vector(relativePosition.x * leg - relativePosition.y * combinedRadius, relativePosition.x * leg + relativePosition.y * combinedRadius)
						line.direction = temp.divide(distSq)
					} 
					else {
						var temp = new Vector(relativePosition.x * leg + relativePosition.y * combinedRadius, -relativePosition.x * leg + relativePosition.y * combinedRadius)
						temp = temp.prod(-1)
						line.direction = temp.divide(distSq)
					}
					
					var dotProduct2 = relativeVelocity.prod(line.direction)
					u = (line.direction.prod(dotProduct2)).minus(relativeVelocity)
				}
			} else {
				// Collision
				// Project on cutoff circle of time timeStep
				var invTimeStep = 1 / timeStep
				
				// Vector from cutoff center to relative velocity
				var w = relativePosition.prod(-invTimeStep)
				
				var wLength = w.abs()
				var unitW = w.divide(wLength)
				line.direction = new Vector(unitW.y, -unitW.x)
				u = unitW.prod(combinedRadius * invTimeStep - wLength)				
			}
			
			line.point = bodyVelocity.plus(u.prod(0.5 as float))
			orcaLines.add(line)
		}
		
		return orcaLines;
	}
	
	
	def linearProgram1(orcaLines : List<Line>, lineNb : int, radius : float, optVelocity : Vector, directionOpt : boolean ) : boolean {
		
		var point = orcaLines.get(lineNb).point
		var direction = orcaLines.get(lineNb).direction
		
		var dotProduct = point.prod(direction)
		var discriminant = Math.pow(dotProduct,2) + Math.pow(radius,2) - point.absSq
		
		if (discriminant < 0) {
			// Max speed circle fully invalidates line lineNb
			return false;
		}
		
		var sqrtDiscriminant = Math.sqrt(discriminant) as float;
		var tLeft = -dotProduct - sqrtDiscriminant;
		var tRight = -dotProduct + sqrtDiscriminant;
		
		for(var i = 0; i < lineNb; i++){
			 var denominator = direction.det(orcaLines.get(i).direction);
			 var numerator = orcaLines.get(i).direction.det(point.minus(orcaLines.get(i).point));
			 
			 if(Math.abs(denominator) <= Constants.EPSILON){
			 	// Lines lineNb and i are (almost) parallel
				if (numerator < 0) {
					return false;
				} 
			 }
			 else{
			 	var t = numerator / denominator;
				 if (denominator >= 0) {
					// Line i bounds line lineNb on the right
					tRight = Math.min(tRight, t);
				 }
				 else {
					// Line i bounds line lineNb on the left
					tLeft = Math.max(tLeft, t);
				 }
				
				 if (tLeft > tRight) {
					 return false;
				 }
			 } 
			 
			 
		}
		
		if (directionOpt) {
			// Optimize direction
			if (optVelocity.prod(direction) > 0){
				// Take right extreme
				newVelocity = point.plus(direction.prod(tRight));
			}
			else {
				// Take left extreme
				newVelocity = point.plus(direction.prod(tLeft))
			}
		}
		else {
			/* Optimize closest point. */
			var t = direction.prod(optVelocity.minus(point));
			
			if (t < tLeft) {
				newVelocity = point.plus(direction.prod(tLeft));
			}
			else if (t > tRight) {
				newVelocity = point.plus(direction.prod(tRight));
			}
			else {
				newVelocity = point.plus(direction.prod(t));
			}
		}

		return true;
	}
	
	def linearProgram2( orcaLines : List<Line>, radius : float, optVelocity : Vector, directionOpt : boolean) : int {
		
		if (directionOpt) {
			// Optimize direction. Note that the optimization velocity is of unit length in this case
			newVelocity = optVelocity.prod(radius);
		} else if (optVelocity.absSq > Math.pow(radius,2)) {
			// Optimize closest point and outside circle
			newVelocity = (optVelocity.normalize).prod(radius);
		} else {
			// Optimize closest point and inside circle
			newVelocity = optVelocity;
		}
		
		for(var i = 0; i < orcaLines.size; i++){
			var direction = orcaLines.get(i).direction
			var point = orcaLines.get(i).point

			if(direction.det(point.minus(newVelocity)) > 0){
				
				// Result does not satisfy constraint i, compute new optimal result
				var tempVelocity = newVelocity
				if(!linearProgram1(orcaLines, i, radius, optVelocity, directionOpt)){
					newVelocity = tempVelocity
					return i;
				}
			}
		}
		
		return orcaLines.size;
	}
	
	def linearProgram3(orcaLines : List<Line>, numObstLines : int, beginLine : int, radius : float){
		var distance = 0.0 as float;
		
		for (var i = beginLine; i < orcaLines.size(); i++) {
			
			var directionI = orcaLines.get(i).direction
			var pointI = orcaLines.get(i).point
		
			if (directionI.det(pointI.minus(newVelocity)) > distance) {
				// Result does not satisfy constraint of line i
				var projLines = new ArrayList<Line>
				projLines += orcaLines.get(0)
				projLines += orcaLines.get(numObstLines) //XXX check if equivalent to lines.begin() + static_cast<ptrdiff_t>(numObstLines))
				
				for (var j = numObstLines; j < i; j++) {
					var directionJ = orcaLines.get(j).direction
					var pointJ = orcaLines.get(j).point
					
					var line = new Line
					var determinant = directionI.det(directionJ)
					
					if (Math.abs(determinant) <= Constants.EPSILON) {
						// Line i and line j are parallel
						if (directionI.prod(directionJ) <= 0.0f) {
							// Line i and line j point in opposite direction
							line.point = (pointI.plus(pointJ)).prod(0.5 as float)
							line.direction = (directionJ.minus(directionI)).normalize
							projLines += line;
						}
					}
					else {
						var coef = directionJ.det(pointI.minus(pointJ)) / determinant
						line.point = pointI.plus(directionI.prod(coef))
						line.direction = (directionJ.minus(directionI)).normalize
						projLines += line;
					}
					 
				}
				
				var tempVelocity = newVelocity
				var vector = new Vector(-directionI.y, directionI.x)
								
				if (linearProgram2(projLines, radius, vector, true) < projLines.size) {
					newVelocity = tempVelocity
				}
				distance = directionI.det(pointI.minus(newVelocity))
			}	
		}
	}
}
