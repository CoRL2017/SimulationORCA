package fr.utbm.ia54.simulationorca.sarlagent

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import java.util.List
import io.sarl.lang.core.Address
import fr.utbm.ia54.simulationorca.framework.Constants
import fr.utbm.ia54.simulationorca.environmentmodel.AgentBody
import fr.utbm.ia54.simulationorca.environmentmodel.Obstacle
import fr.utbm.ia54.simulationorca.sarlevent.PerceptionEvent
import io.sarl.util.Scopes
import fr.utbm.ia54.simulationorca.sarlcapacity.ComputePerceptionCapacity
import fr.utbm.ia54.simulationorca.sarlcapacity.ResolveConflictCapacity
import io.sarl.core.Schedules
import fr.utbm.ia54.simulationorca.sarlskill.ComputePerceptionSkill
import fr.utbm.ia54.simulationorca.sarlskill.ResolveConflictSkill
import io.sarl.core.Behaviors
import fr.utbm.ia54.simulationorca.sarlevent.EndOfStepEvent
import fr.utbm.ia54.simulationorca.sarlevent.SimulationStepEvent
import fr.utbm.ia54.simulationorca.gui.EnvironmentListener
import fr.utbm.ia54.simulationorca.sarlskill.UpdateEnvironmentSkill
import fr.utbm.ia54.simulationorca.sarlcapacity.UpdateEnvironmentCapacity
import java.util.HashSet
import fr.utbm.ia54.simulationorca.sarlevent.InfluenceEvent
import java.util.ArrayList
import java.util.concurrent.atomic.AtomicBoolean
import java.util.TreeMap
import fr.utbm.ia54.simulationorca.framework.Vector
import fr.utbm.ia54.simulationorca.environmentmodel.TimeManager

agent Environment{
	
	uses DefaultContextInteractions, Behaviors,ComputePerceptionCapacity,ResolveConflictCapacity,UpdateEnvironmentCapacity,Schedules
	
	var hashAgentBodies = new TreeMap<Address,AgentBody>
	var listListeners = new ArrayList<EnvironmentListener>
	var listObstacles : List<Obstacle>
	var receivedInfluences = <InfluenceEvent>newArrayList
	var fireStepEvent = new AtomicBoolean(false)
	
	on Initialize{
		// Set skills
		var skillCompute = new ComputePerceptionSkill
    	setSkill(ComputePerceptionCapacity, skillCompute)
    	var skillResolve = new ResolveConflictSkill
		setSkill(ResolveConflictCapacity, skillResolve)
		var skillUpdate = new UpdateEnvironmentSkill()
		setSkill(UpdateEnvironmentCapacity, skillUpdate)
				
		println("in Initialize")
		listObstacles = occurrence.parameters.get(2) as List<Obstacle>
		spawnPedestrianBodies(occurrence.parameters.get(0) as List<Address>, occurrence.parameters.get(1) as List<Vector>)
		listListeners.add(occurrence.parameters.get(3) as EnvironmentListener)
		
		fireUpdateFrame
		
		wake(new SimulationStepEvent)

		every(Constants.TIMEOUT)[
			if (fireStepEvent.get) {
				wake(new EndOfStepEvent)
			}	
		]
	}
	
	on SimulationStepEvent{
		println("in SimulationStepEvent")
				
		for (body : hashAgentBodies.values()) {
		 	//use the skill computePerception
			var perceptions = computePerception(body.position, hashAgentBodies.values(), listObstacles)
			emit(new PerceptionEvent(body, perceptions),Scopes.addresses(body.pedestrianAddress))
		}
		
		fireStepEvent.set(true)
	}
	
	on EndOfStepEvent{
		fireStepEvent.set(false)
	
		println("in EndOfStepEvent")
		
		TimeManager.incrementTime
		println("time = " + TimeManager.time)
		//use skill ResolveConflictSkill
		resolveConflict(receivedInfluences, hashAgentBodies)
		receivedInfluences.clear
		// Fire update signal to the listeners
		fireUpdateFrame
		//do an other step of Simulation
		wake(new SimulationStepEvent)
	}
	

	on InfluenceEvent{
		println("in InfuenceReceivedEvent")
		receivedInfluences += occurrence
		if (receivedInfluences.size >= hashAgentBodies.size) {
			//pour enlever le pb de pls executions en mm temps
			//wake(new EndOfStepEvent)
		}	
	}
	
	def fireUpdateFrame(){
		for(listener as EnvironmentListener : listListeners){
			listener.updateGraphics(new HashSet(hashAgentBodies.values()))			
		}
	}
	
	def spawnPedestrianBodies(listPedestrianAdresses : List<Address>, listInitialPositions : List<Vector>){
		for(var i=0; i<listPedestrianAdresses.size(); i++){
			hashAgentBodies.put(listPedestrianAdresses.get(i),new AgentBody(listPedestrianAdresses.get(i), listInitialPositions.get(i)))
		}
	}
	
}