package fr.utbm.ia54.simulationorca.sarlagent

import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import fr.utbm.ia54.simulationorca.framework.Position
import fr.utbm.ia54.simulationorca.sarlevent.PerceptionEvent
import io.sarl.core.DefaultContextInteractions
import fr.utbm.ia54.simulationorca.sarlevent.InfuenceEvent
import io.sarl.util.Scopes
import fr.utbm.ia54.simulationorca.sarlcapacity.ComputeNextMoveCapacity
import fr.utbm.ia54.simulationorca.sarlskill.ComputeORCASkill

agent Pedestrian {

	uses Lifecycle, DefaultContextInteractions,ComputeNextMoveCapacity
	
	var initialPosition : Position
	var finalPostition : Position
	
	on Initialize {
		
		initialPosition = occurrence.parameters.get(0) as Position
		finalPostition = occurrence.parameters.get(1) as Position

		var skillORCA = new ComputeORCASkill
		setSkill(ComputeNextMoveCapacity,skillORCA)
	}
	
	on PerceptionEvent{
		println("in PerceptionReceivedEvent")
		
		// Compute next move using ORCA algorithm
		var newPos : Position = nextMove(occurrence.bodyPos, occurrence.perceptions)
		
		// Send computed position to the environment
		// selected scope only send the Influence event to the source 
		// of the Perception event, that is to say the Environment
		emit(new InfuenceEvent(newPos),Scopes.addresses(occurrence.source))
	}	
}